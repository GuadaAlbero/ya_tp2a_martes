// üìò TEMA: DESESTRUCTURACI√ìN DE OBJETOS EN JAVASCRIPT

// üì¶ OBJETO DE EJEMPLO
const obj = {
  nombre: "Osvaldo",
  mail: "mimail@gmail.com",
  edad: 38,
};

// ‚úÖ ACCEDER A UNA PROPIEDAD con notaci√≥n de corchetes (menos usada)
console.log(obj["nombre"]); // ‚Üí "Osvaldo"

// ‚úÖ ACCEDER A CADA PROPIEDAD MANUALMENTE (forma cl√°sica)
const nombre = obj.nombre;
const mail = obj.mail;
const edad = obj.edad;

console.log(`üöÄ ~ nombre:`, nombre); // ‚Üí "Osvaldo"

// ‚úÖ DESESTRUCTURACI√ìN: forma moderna y prolija de extraer varias propiedades
const { edad: edad2, nombre: nombre2, apellido = "Sin apellido" } = obj;

// üîç DETALLES:
// - Extrae `edad` y `nombre`, y los guarda en variables nuevas llamadas `edad2`, `nombre2`
// - `apellido` no existe en el objeto, as√≠ que se usa el valor por defecto: "Sin apellido"

console.log(`üöÄ ~ nombre2:`, nombre2);       // ‚Üí "Osvaldo"
console.log(`üöÄ ~ edad2:`, edad2);           // ‚Üí 38
console.log(`üöÄ ~ apellido:`, apellido);     // ‚Üí "Sin apellido"

// ‚úÖ Tambi√©n podr√≠as hacer desestructuraci√≥n SIN renombrar (m√°s simple si no necesit√°s cambiar nombres)
//{ ... } = usuario -> ‚ÄúSaco propiedades del objeto usuario y las meto en variables nuevas.‚Äù
//const { edad, nombre, mail } = obj;

// üìò TEMA: DESESTRUCTURACI√ìN DE ARRAYS EN JAVASCRIPT

const arr = ["hola", 456, {}];

// üîπ Forma cl√°sica (sin desestructuraci√≥n):
// const saludo = arr[0];
// const numero = arr[1];
// const objeto = arr[2];

// üîπ Forma moderna con DESESTRUCTURACI√ìN:
const [saludo, numero, objeto, extra = "valor por defecto"] = arr;

// üß† DETALLES:
// - `saludo` recibe el primer valor ‚Üí "hola"
// - `numero` recibe el segundo valor ‚Üí 456
// - `objeto` recibe el tercer valor ‚Üí {}
// - `extra` no existe en el array original, as√≠ que se le asigna el valor por defecto ‚Üí "valor por defecto"

console.log("üü¢ saludo:", saludo);     // ‚Üí "hola"
console.log("üü¢ numero:", numero);     // ‚Üí 456
console.log("üü¢ objeto:", objeto);     // ‚Üí {}
console.log("üü¢ extra:", extra);       // ‚Üí "valor por defecto"

// üìò TEMA: COPIA POR REFERENCIA EN OBJETOS

// Creamos un objeto con datos anidados (otro objeto y un array dentro)
const obj2 = {
  nombre: "Osvaldo",
  mail: "mimail@gmail.com",
  edad: 38,
  data: {
    direccion: "calle 123",
    titulos: ["jardin", "primaria"],
  },
};

// Hacemos una "copia" del objeto, pero en realidad solo copiamos la referencia
const copia = obj2;

// Modificamos un valor en la "copia"
copia.edad = 39;

// ‚úÖ Imprimimos ambos para ver qu√© pas√≥
console.log("üîÅ copia:", copia); // edad: 39
console.log("üß® obj original:", obj2); // edad: 39 tambi√©n üò±

// üß† ¬øQu√© pas√≥?
// Como los objetos se copian por REFERENCIA, ambas variables apuntan al MISMO objeto en memoria.
// Entonces si cambi√°s algo desde `copia`, tambi√©n se ve reflejado en `obj`.

// üìò TEMA: COPIA SUPERFICIAL CON SPREAD (...)

const obj3 = {
  nombre: "Osvaldo",
  mail: "mimail@gmail.com",
  edad: 38,
  data: {
    direccion: "calle 123",
    titulos: ["jardin", "primaria"],
  },
};

// Hacemos una copia superficial con spread
const copiaSpread = { ...obj3 };

// Modificamos el primer nivel ‚Üí esto NO afecta al original
copiaSpread.nombre = "Carlos";

// Modificamos algo anidado ‚Üí esto S√ç afecta al original
copiaSpread.data.cp = 1440;

console.log("üü¢ copiaSpread:", copiaSpread);
console.log("üî¥ obj original:", obj3);


// üìò TEMA: COPIA PROFUNDA DE OBJETOS Y ARRAYS

// ---------------------------------------------
// üî∏ M√âTODO 1: JSON.stringify + JSON.parse
// (Sirve para la mayor√≠a de los casos, pero tiene limitaciones)

const copiaParse = JSON.parse(JSON.stringify(obj3));
copiaParse.data.direccion = "Calle falsa 123";

console.log("üü° copiaParse:", copiaParse); // con direcci√≥n modificada
console.log("üü° obj original:", obj3);      // direcci√≥n original intacta

// ‚ö†Ô∏è LIMITACIONES del m√©todo JSON:
// - Pierde funciones
// - Pierde valores `undefined`
// - Convierte fechas (Date) a strings
// - No funciona con Map, Set, etc.

// ---------------------------------------------
// üîπ M√âTODO 2: structuredClone (üíé la forma moderna y recomendada)

const copiaStructure = structuredClone(obj3);
copiaStructure.data.titulos.push("secundaria");

console.log("üîµ copiaStructure:", copiaStructure); // tiene "secundaria"
console.log("üîµ obj original:", obj3);              // NO tiene "secundaria"

// üîπ Tambi√©n funciona con arrays:
const copiaArrStructure = structuredClone(arr);

// Modificamos la copia
copiaArrStructure[2].nuevoCampo = "agregado";

console.log("üîµ copiaArrStructure:", copiaArrStructure);
console.log("üü° arr original:", arr);

// üìò TEMA: PROMESAS EN JAVASCRIPT (EJEMPLO MANUAL)

// üîπ Creamos una funci√≥n que devuelve una promesa.
//    Si el par√°metro `boo` es true ‚Üí la promesa se resuelve (resolve)
//    Si es false ‚Üí la promesa se rechaza (reject)

function promesa(boo) {
  return new Promise((response, reject) => {
    if (boo) {
      response("todo ok");
    } else {
      reject("todo mal");
    }
  });
}

// üîπ Probamos la promesa con consumo correcto usando then / catch / finally

// ‚úèÔ∏è Cambi√° true o false para ver qu√© pasa
promesa(true)
  .then((res) => {
    // ‚úÖ Si se resolvi√≥ correctamente (resolve)
    console.log("‚úÖ √âxito:", res); // ‚Üí "todo ok"
    return res + " si"; // agregamos algo m√°s y lo pasamos al siguiente .then
  })
  .then((res2) => {
    // üì¶ Este then recibe lo que se devolvi√≥ antes ("todo ok si")
    console.log("üì¶ Resultado intermedio:", res2);
  })
  .catch((err) => {
    // ‚ùå Si algo sali√≥ mal (reject)
    console.log("‚ùå Error:", err); // ‚Üí "todo mal"
  })
  .finally(() => {
    // üîö Esto se ejecuta siempre, pase lo que pase
    console.log("üîö Finaliz√≥ la promesa");
  });

// üìò TEMA: FETCH CON PROMESAS (API - PokeAPI)

// üîπ Esta funci√≥n hace un pedido HTTP usando fetch
// üîπ fetch devuelve una promesa que se resuelve con la "respuesta" del servidor
function api() {
  return fetch("https://pokeapi.co/api/v2/pokemon/ditto");
}

// üîπ Consumimos esa promesa con then/catch (modo cl√°sico)
api()
  .then((res) => {
    // ‚úÖ Cuando llega la respuesta, todav√≠a no tenemos el contenido
    //    Hay que convertirla a JSON (tambi√©n devuelve una promesa)
    return res.json();
  })
  .then((data) => {
    // üì¶ Ahora s√≠ tenemos los datos de la API
    console.log("üü¢ Pok√©mon obtenido:", data.name); // ‚Üí "ditto"
    // console.log(data); // si quer√©s ver todo el objeto completo
  })
  .catch((err) => {
    // ‚ùå Si algo falla (problema de red, URL incorrecta, etc.)
    console.log("‚ùå Error al hacer fetch:", err.message);
  });


